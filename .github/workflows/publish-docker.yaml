name: 'Publish: Docker'
on:
  push:
    tags:
      - 'v*.*.*-r*'

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    environment:
      name: production
    env:
      KUBE_NAMESPACE: jstunnel
      DOCKER_IMAGE_TAG: svtslv/jstunnel:${{ github.ref_name }}
      DOCKER_IMAGE_LATEST: svtslv/jstunnel
      GITHUB_IMAGE_TAG: ghcr.io/svtslv/jstunnel:${{ github.ref_name }}
      GITHUB_IMAGE_LATEST: ghcr.io/svtslv/jstunnel

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate Version
        uses: ./.github/actions/validate-version
        with:
          tag: ${{ github.ref_name }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_TAG }}
            ${{ env.DOCKER_IMAGE_LATEST }}
            ${{ env.GITHUB_IMAGE_TAG }}
            ${{ env.GITHUB_IMAGE_LATEST }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE_LATEST }}
          cache-to: type=inline

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Set up Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Create namespace if not exists
        run: |
          kubectl get namespace ${{ env.KUBE_NAMESPACE }} || kubectl create namespace ${{ env.KUBE_NAMESPACE }}

      - name: Create Docker Pull Secret
        run: |
          kubectl create secret docker-registry dockerhub-secret \
            --docker-server=https://index.docker.io/v1/ \
            --docker-username=${{ secrets.DOCKERHUB_USERNAME }} \
            --docker-password=${{ secrets.DOCKERHUB_PASSWORD }} \
            --docker-email=${{ secrets.DOCKERHUB_USERNAME }}@users.noreply.github.com \
            -n ${{ env.KUBE_NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Update Kubernetes Secrets
        run: |
          cat << EOF | kubectl apply -f -
          apiVersion: v1
          kind: Secret
          metadata:
            name: environment-secret
            namespace: ${{ env.KUBE_NAMESPACE }}
          type: Opaque
          stringData:
            TUNNEL_SERVER_TOKEN: "${{ secrets.TUNNEL_SERVER_TOKEN }}"
          EOF

      - name: Deploy Server to Kubernetes
        run: |
          sed -i "s|image:.*|image: ${{ env.DOCKER_IMAGE_TAG }}|g" infra/server-prod.yaml
          kubectl apply -f infra/server-prod.yaml -n ${{ env.KUBE_NAMESPACE }}
          kubectl rollout status deployment/jstunnel-server-deployment -n ${{ env.KUBE_NAMESPACE }} --timeout=300s

      - name: Deploy Website to Kubernetes
        run: |
          sed -i "s|image:.*|image: ${{ env.DOCKER_IMAGE_TAG }}|g" infra/website-prod.yaml
          kubectl apply -f infra/website-prod.yaml -n ${{ env.KUBE_NAMESPACE }}
          kubectl rollout status deployment/jstunnel-website-deployment -n ${{ env.KUBE_NAMESPACE }} --timeout=300s